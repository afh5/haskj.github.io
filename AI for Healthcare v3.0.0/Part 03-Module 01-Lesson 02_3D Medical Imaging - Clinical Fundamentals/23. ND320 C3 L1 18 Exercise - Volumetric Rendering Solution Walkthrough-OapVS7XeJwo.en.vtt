WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.800
Hello. So this is a walk-through of a solution of our exercise number 3,

00:00:04.800 --> 00:00:07.380
the exercise on volumetric rendering.

00:00:07.380 --> 00:00:10.860
Hopefully at this point you have had a chance to take a look at

00:00:10.860 --> 00:00:14.609
this exercise yourself and maybe you have completed this exercise.

00:00:14.609 --> 00:00:18.300
I just wanted to do this walk-through because I wanted to make sure that

00:00:18.300 --> 00:00:21.930
we go through some of the important points of

00:00:21.930 --> 00:00:27.060
this exercise and some of the libraries and methods that we have used to analyze

00:00:27.060 --> 00:00:32.550
our 3D images and build the volume renderings out of them,

00:00:32.550 --> 00:00:34.545
out of it, out of one image.

00:00:34.545 --> 00:00:38.640
So let's look at some of the Python code here and let's look at the imports,

00:00:38.640 --> 00:00:41.235
the libraries that we will be relying upon.

00:00:41.235 --> 00:00:44.270
We have the numpy library here,

00:00:44.270 --> 00:00:46.310
which is the library for manipulating

00:00:46.310 --> 00:00:51.245
multi-dimensional arrays in Python and doing linear algebra operations on them.

00:00:51.245 --> 00:00:53.650
We have this library called nibabel,

00:00:53.650 --> 00:00:57.275
which is the library for manipulating NIfTI files.

00:00:57.275 --> 00:01:00.980
In the next lesson, we will go into some detail of what

00:01:00.980 --> 00:01:04.550
are the file formats used by in 3D medical imaging.

00:01:04.550 --> 00:01:06.935
We will talk about DICOM and NIfTI.

00:01:06.935 --> 00:01:10.430
For now don't worry about that too much, we have this library,

00:01:10.430 --> 00:01:14.910
nibabel, this is the library that you use to load NIfTI files.

00:01:14.910 --> 00:01:18.380
We have matplotlib, matplotlib is our usual suspects

00:01:18.380 --> 00:01:22.610
for displaying plots in Jupyter notebooks,

00:01:22.610 --> 00:01:26.615
and we will be using that to display our medical images,

00:01:26.615 --> 00:01:29.300
and we have the scipy library,

00:01:29.300 --> 00:01:33.695
which we will use to perform some algebraic operations on our array,

00:01:33.695 --> 00:01:35.600
as you will see below.

00:01:35.600 --> 00:01:37.850
So let's run the cell,

00:01:37.850 --> 00:01:39.545
we've loaded our library.

00:01:39.545 --> 00:01:41.480
In the next line here, what's happening,

00:01:41.480 --> 00:01:45.215
we're using the nibabel library to load a volume.

00:01:45.215 --> 00:01:49.370
The volume is stored as a zipped NIfTI file,

00:01:49.370 --> 00:01:53.585
so this is a standard way of storing NIfTI files,

00:01:53.585 --> 00:01:59.060
and it's one file that holds all of the three-dimensional medical image.

00:01:59.060 --> 00:02:01.325
Let's run this cell, load the volume.

00:02:01.325 --> 00:02:05.375
Then the next cell we are using the method called get_fdata.

00:02:05.375 --> 00:02:08.060
This is the method that takes all the voxels from

00:02:08.060 --> 00:02:12.665
the 3D medical volume and converts that into a numpy array.

00:02:12.665 --> 00:02:14.840
So at this point in this image_np,

00:02:14.840 --> 00:02:16.760
we just have a numpy array,

00:02:16.760 --> 00:02:18.610
which should be a three-dimensional array,

00:02:18.610 --> 00:02:20.645
and we will confirm that by running

00:02:20.645 --> 00:02:24.890
this member by calling this member variable called shape.

00:02:24.890 --> 00:02:27.185
If we run the cell now,

00:02:27.185 --> 00:02:32.570
we can see that our array is of shape 360 by 360 by 330,

00:02:32.570 --> 00:02:34.050
which is what we would expect,

00:02:34.050 --> 00:02:38.015
so it has quite a few voxels in there.

00:02:38.015 --> 00:02:44.300
The first dimension is the x-axis and if we cut across this axis,

00:02:44.300 --> 00:02:46.670
we will get slices in the sagittal plane.

00:02:46.670 --> 00:02:48.770
So remember how we just talked about

00:02:48.770 --> 00:02:53.570
the three cardinal anatomical planes: sagittal, coronal and axial.

00:02:53.570 --> 00:02:56.630
I just happened to know because I looked at this volume,

00:02:56.630 --> 00:02:59.180
that's the first dimension here is

00:02:59.180 --> 00:03:03.080
the x-axis cutting through it will give us the sagittal plane.

00:03:03.080 --> 00:03:06.620
The second dimension is the y-axis and

00:03:06.620 --> 00:03:10.280
cutting through that it will give us the coronal plane.

00:03:10.280 --> 00:03:13.825
The third dimension is the z-axis,

00:03:13.825 --> 00:03:17.100
and cutting through z-axis will give us the axial plane.

00:03:17.100 --> 00:03:21.020
You can guess that this is the axial plane because

00:03:21.020 --> 00:03:24.635
the third dimension has less size than the first two.

00:03:24.635 --> 00:03:30.310
Typically, 3D medical images will have equal dimensions in the primary acquisition plane,

00:03:30.310 --> 00:03:35.570
and we've talked how for CT scans axial plane is the primary acquisition plane typically.

00:03:35.570 --> 00:03:41.750
So I can take a really good guess that if I cut through the Z dimension here,

00:03:41.750 --> 00:03:43.685
I will get my axial slices.

00:03:43.685 --> 00:03:49.850
So at this point, let's visualize a cut across the first axis, the x-axis.

00:03:49.850 --> 00:03:55.710
Let's make a call for a matplotlib library and we will pass this variable to it.

00:03:55.710 --> 00:04:02.510
So these are the two-dimensional array extracted from level 100 of the first dimension.

00:04:02.510 --> 00:04:05.030
So as we've established, the first dimension,

00:04:05.030 --> 00:04:07.670
the x-axis is our sagittal plane,

00:04:07.670 --> 00:04:10.895
sagittal plane separates the left from the right.

00:04:10.895 --> 00:04:17.510
Actually what we're looking at here is a cut through the image of a human head,

00:04:17.510 --> 00:04:20.720
right somewhere towards the left side of it,

00:04:20.720 --> 00:04:25.690
and we will see it much clearer as we get into the next stages of the exercise,

00:04:25.690 --> 00:04:27.335
because what we want to do now,

00:04:27.335 --> 00:04:31.010
we want to use the information from all the slices

00:04:31.010 --> 00:04:35.210
to visualize a volumetric rendering of this volume.

00:04:35.210 --> 00:04:38.060
So let's go into the first part of the exercise,

00:04:38.060 --> 00:04:40.660
which is the orthographic projection.

00:04:40.660 --> 00:04:42.470
What we will do here,

00:04:42.470 --> 00:04:50.510
here I've asked you to just add up all the slices across one axis, the x-axis.

00:04:50.510 --> 00:04:52.370
Let us do that.

00:04:52.370 --> 00:04:54.665
So we have our holder array,

00:04:54.665 --> 00:05:00.545
array that's our x by z dimensions in size,

00:05:00.545 --> 00:05:03.965
this should be a 360 by 330 array.

00:05:03.965 --> 00:05:05.780
What we will do here,

00:05:05.780 --> 00:05:08.360
the solution to that task is really simple,

00:05:08.360 --> 00:05:11.755
we just iterate all of the slices across

00:05:11.755 --> 00:05:17.655
the x dimension and cross all of the sagittal slices,

00:05:17.655 --> 00:05:20.010
and we just add them all up.

00:05:20.010 --> 00:05:25.595
So one we will call the matplotlib image show methods on a volume like that,

00:05:25.595 --> 00:05:32.225
it will know how to scale them properly to visualize them using the greyscale color map.

00:05:32.225 --> 00:05:35.960
Note that I'm also using this scipy method

00:05:35.960 --> 00:05:40.220
nd.rotate here to rotate the volume by 90 degrees.

00:05:40.220 --> 00:05:42.780
I just happen to know that the way it's stored,

00:05:42.780 --> 00:05:48.600
it's sideways so I will do this rotation so that the volume shows up properly.

00:05:48.600 --> 00:05:50.570
After I run this code,

00:05:50.570 --> 00:05:56.060
we do our sum up and what we see here is a volumetric rendering,

00:05:56.060 --> 00:05:59.510
the orthographic projection of all the slices across the coronal plane,

00:05:59.510 --> 00:06:02.330
and even without much knowledge of the anatomy,

00:06:02.330 --> 00:06:05.930
you can guess that what we are looking here is a human head.

00:06:05.930 --> 00:06:10.525
You might also notice that this thing here looks very much like an X-ray.

00:06:10.525 --> 00:06:16.130
Actually, if we look at an X-ray of a human head on a site called radiopaedia,

00:06:16.130 --> 00:06:19.805
which has a nice collection of various medical images.

00:06:19.805 --> 00:06:23.015
If we compare that to what we have just computed,

00:06:23.015 --> 00:06:29.030
we will see it is very similar and actually it looks almost exactly the same.

00:06:29.030 --> 00:06:33.035
This is something to be expected because if you remember the lesson

00:06:33.035 --> 00:06:37.009
on the physical principles of the CT scanners,

00:06:37.009 --> 00:06:43.325
then you will remember that CT scanners operate by casting X-rays through the anatomy and

00:06:43.325 --> 00:06:50.300
measuring the attenuation of the X-rays by different parts of the anatomy.

00:06:50.300 --> 00:06:52.820
X-ray machines, the radiographs,

00:06:52.820 --> 00:06:54.035
they do the same thing,

00:06:54.035 --> 00:06:59.555
but as the measure of the attenuation through the entire volume

00:06:59.555 --> 00:07:05.630
of anatomical structure under study as opposed to a single slice a CT machine is doing.

00:07:05.630 --> 00:07:07.939
So what we are doing here in this exercise,

00:07:07.939 --> 00:07:11.750
we are adding up all the slices that CT machine has acquired,

00:07:11.750 --> 00:07:16.460
and this amounts to the same operation essentially as an X-ray scan is doing.

00:07:16.460 --> 00:07:19.955
So if you add up all the slices acquired by CT scanner,

00:07:19.955 --> 00:07:22.325
you will get a simple radiograph.

00:07:22.325 --> 00:07:23.480
That's what we have here,

00:07:23.480 --> 00:07:29.820
it's a radiograph of a human skull or orthographic projection of a CT image.

00:07:29.840 --> 00:07:33.380
In the next portion, I am asking you to implement

00:07:33.380 --> 00:07:36.350
an algorithm called maximum intensity projection.

00:07:36.350 --> 00:07:38.810
So if in the previous exercise,

00:07:38.810 --> 00:07:44.975
we took all of the voxels across one slice and we added them all up,

00:07:44.975 --> 00:07:47.345
now we will do something different.

00:07:47.345 --> 00:07:52.520
We will try to propagate the values with highest intensity by going through this process,

00:07:52.520 --> 00:07:56.225
by going through the process of adding all the slices across one axis.

00:07:56.225 --> 00:07:59.750
For a change, we will do this across the y-axis.

00:07:59.750 --> 00:08:03.050
To recall why the y-axis is the axis

00:08:03.050 --> 00:08:06.635
that's cutting through this axis will yield us coronal planes,

00:08:06.635 --> 00:08:09.965
and coronal planes, they separate front from the back.

00:08:09.965 --> 00:08:11.660
So if we do our thing right,

00:08:11.660 --> 00:08:19.835
we we'll have a frontal view of the human head here that's represented by our 3D volume.

00:08:19.835 --> 00:08:21.365
So let's try doing that.

00:08:21.365 --> 00:08:22.865
We have our holder array.

00:08:22.865 --> 00:08:27.935
The holder array is of size 360 by 330 again.

00:08:27.935 --> 00:08:31.355
We will write a loop which is very similar,

00:08:31.355 --> 00:08:34.010
so we're looping across our y-dimension,

00:08:34.010 --> 00:08:37.965
but now work using this np.maximum function.

00:08:37.965 --> 00:08:40.030
What this function does basically,

00:08:40.030 --> 00:08:47.780
it computes the maximum values between the holder array and the image at a given slice,

00:08:47.780 --> 00:08:50.075
the two-dimensional image at a given slice.

00:08:50.075 --> 00:08:54.725
Let us perform this operation and let's visualize our image.

00:08:54.725 --> 00:08:59.885
Again, I will do the rotation here to bring it into proper orientation,

00:08:59.885 --> 00:09:04.760
and if we do that we will get this beautiful picture of a human skull.

00:09:04.760 --> 00:09:08.555
So this picture is quite different from the picture we have just seen,

00:09:08.555 --> 00:09:11.270
and here we see these highlights,

00:09:11.270 --> 00:09:13.235
we see the bright white areas.

00:09:13.235 --> 00:09:16.010
So this is exactly why MIP projections,

00:09:16.010 --> 00:09:20.210
maximum intensity projections are useful to clinicians.

00:09:20.210 --> 00:09:27.215
Because these projections, they bring out the tissues that has the highest radio density.

00:09:27.215 --> 00:09:30.530
In this case, it is clear that our image has

00:09:30.530 --> 00:09:33.920
some synthetic material in it because these things do not look natural.

00:09:33.920 --> 00:09:38.720
So we have some pins in hear that the patient has implanted into their mandible.

00:09:38.720 --> 00:09:43.310
We have something that looks like a tooth implant and we have some

00:09:43.310 --> 00:09:48.170
probably this is some metal hardware that's sitting there closer to the face.

00:09:48.170 --> 00:09:53.660
So this is clearly an image of someone who has undergone some facial surgery.

00:09:53.660 --> 00:09:57.890
This is why maximum intensity projections allows us to clearly see

00:09:57.890 --> 00:10:03.145
the implants here and how they relate to the overall anatomy.

00:10:03.145 --> 00:10:06.210
So I hope you enjoyed this exercise.

00:10:06.210 --> 00:10:08.450
There is much more to volumetric rendering.

00:10:08.450 --> 00:10:11.450
You have been introduced to a couple of methods for doing that.

00:10:11.450 --> 00:10:14.420
If you're interested later on in this lesson,

00:10:14.420 --> 00:10:17.090
I will post some links to some amazing methods

00:10:17.090 --> 00:10:19.970
for volumetric rendering that people have used.

00:10:19.970 --> 00:10:23.255
For now, we're getting to the end of this lesson

00:10:23.255 --> 00:10:32.580
and I hope you will enjoy the next lesson on the actual medical imaging formats.

