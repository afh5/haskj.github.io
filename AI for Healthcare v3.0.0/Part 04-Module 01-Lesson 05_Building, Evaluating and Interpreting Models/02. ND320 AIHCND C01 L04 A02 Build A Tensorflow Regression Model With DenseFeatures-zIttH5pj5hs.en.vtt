WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.330
It's time to use TensorFlow DenseFeatures.

00:00:03.330 --> 00:00:05.085
By the end of this section,

00:00:05.085 --> 00:00:09.389
you'll be able to use DenseFeatures to build a simple regression model,

00:00:09.389 --> 00:00:11.250
and combine the output from

00:00:11.250 --> 00:00:15.405
the TensorFlow feature column API features you created earlier.

00:00:15.405 --> 00:00:18.600
So let's get started. In this section,

00:00:18.600 --> 00:00:22.740
we'll focus on just building a simple TensorFlow regression model.

00:00:22.740 --> 00:00:27.300
But we realize that there are more advanced deep learning architectures that you can

00:00:27.300 --> 00:00:29.190
consider and feel free to try

00:00:29.190 --> 00:00:32.505
different approaches to augment your features in architecture.

00:00:32.505 --> 00:00:36.390
However, we did want to provide the context around AutoML in

00:00:36.390 --> 00:00:40.705
the industry that is providing more automation for building models.

00:00:40.705 --> 00:00:45.470
There's a whole field of research and tools that are providing ways to automate modeling.

00:00:45.470 --> 00:00:49.430
These include cloud services such as GCPs,

00:00:49.430 --> 00:00:52.670
AutoML or AWS's Autopilot.

00:00:52.670 --> 00:01:00.235
These also include open-source libraries such as AdaNet or AutoKeras and many others.

00:01:00.235 --> 00:01:03.150
It also includes paid software licenses,

00:01:03.150 --> 00:01:09.070
such as H2O Driverless AI or Data Robots Solution as well.

00:01:09.070 --> 00:01:12.380
Underlying part of this automation is the discovery

00:01:12.380 --> 00:01:15.560
of architectures through neural architecture search,

00:01:15.560 --> 00:01:17.870
which is using a range of solutions from

00:01:17.870 --> 00:01:22.820
brute force search to evolutionary algorithms in deep reinforcement learning.

00:01:22.820 --> 00:01:26.285
One interesting example of using neural architecture search

00:01:26.285 --> 00:01:29.690
came from the paper where the researchers were able to come up with

00:01:29.690 --> 00:01:31.490
a new architecture for

00:01:31.490 --> 00:01:36.980
the popular transformer architecture that is in vogue these days for NLP problems.

00:01:36.980 --> 00:01:38.900
So for this concept,

00:01:38.900 --> 00:01:43.220
we will build off of the previous lesson where we create features using

00:01:43.220 --> 00:01:45.980
the TensorFlow feature column API to build

00:01:45.980 --> 00:01:50.030
a simple regression model using TensorFlow DenseFeatures,

00:01:50.030 --> 00:01:55.685
which handles combining the features into a dense representation for the model.

00:01:55.685 --> 00:02:01.190
Please note though that you must use always certain TensorFlow feature columns,

00:02:01.190 --> 00:02:03.920
such as the numeric_column, embedding_column,

00:02:03.920 --> 00:02:08.285
call bucketized_column, and indicator_column.

00:02:08.285 --> 00:02:10.459
Lastly, for the sake of simplicity,

00:02:10.459 --> 00:02:13.550
we will use a sequential API for this course.

00:02:13.550 --> 00:02:15.470
But if you want to customize further,

00:02:15.470 --> 00:02:17.795
feel free to try the functional API.

00:02:17.795 --> 00:02:21.380
However, you might encounter some issues later with configuring

00:02:21.380 --> 00:02:25.280
some other parts with the TensorFlow probability outputs.

00:02:25.280 --> 00:02:29.780
As of writing, TensorFlow is experimenting with SequenceFeature columns

00:02:29.780 --> 00:02:34.280
as well that can be combined with the SequenceFeatures function.

00:02:34.280 --> 00:02:36.530
This will not be covered in this course,

00:02:36.530 --> 00:02:41.400
but I did want to share this for your info because this can be helpful as well.

