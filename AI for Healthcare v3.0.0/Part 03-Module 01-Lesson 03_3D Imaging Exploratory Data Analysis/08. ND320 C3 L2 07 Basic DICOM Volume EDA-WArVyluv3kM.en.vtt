WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.860
Now, let's jump into a screencast of a Python notebook where we will go through

00:00:04.860 --> 00:00:09.885
some steps which would be reasonable to analyze this 3D medical imaging volume.

00:00:09.885 --> 00:00:11.655
This is a Jupyter Notebook.

00:00:11.655 --> 00:00:16.470
In this notebook, we will walk through some of the steps of using Python

00:00:16.470 --> 00:00:21.810
to load an imaging dataset and to extract some useful information from it.

00:00:21.810 --> 00:00:23.925
We'll be using some libraries here,

00:00:23.925 --> 00:00:25.740
we'll be using pydicom library.

00:00:25.740 --> 00:00:33.375
Pydicom is a good Python library to parse DICOM files and reads DICOM metadata.

00:00:33.375 --> 00:00:37.080
We will use matplotlib to plot some of the images,

00:00:37.080 --> 00:00:42.100
to draw some of the images as matplotlibs inside the Jupyter Notebook.

00:00:42.100 --> 00:00:45.060
We will use NumPy to process DICOM volumes,

00:00:45.060 --> 00:00:50.270
and we will use the OS library to load basically files from the file system.

00:00:50.270 --> 00:00:53.420
So we have some volumes sitting next to this notebook

00:00:53.420 --> 00:00:57.920
and you will see the same volumes if you want to work with this notebook yourself,

00:00:57.920 --> 00:01:02.045
you will see the same volumes in the files that accompany this lessons.

00:01:02.045 --> 00:01:07.550
We use pydicom.dcmread to read every DICOM file.

00:01:07.550 --> 00:01:09.350
We'll load them into an array,

00:01:09.350 --> 00:01:11.635
we call it slices.

00:01:11.635 --> 00:01:14.450
By the way, I'm not saying that this is

00:01:14.450 --> 00:01:16.990
the best and the most optimized way to load this slices.

00:01:16.990 --> 00:01:19.100
If you know some ways to optimize this,

00:01:19.100 --> 00:01:21.660
feel free to do it differently.

00:01:21.660 --> 00:01:25.850
This is one way of quickly and efficiently getting slices into the memory.

00:01:25.850 --> 00:01:27.865
Let's see how many slices we have.

00:01:27.865 --> 00:01:33.945
We have 139 slices and this is a CT series which is reasonable.

00:01:33.945 --> 00:01:39.380
Let us print so one of those slices and pydicom implements an interface which allows us

00:01:39.380 --> 00:01:44.885
to just print one of those objects and it will print all the DICOM metadata.

00:01:44.885 --> 00:01:46.310
We see those values.

00:01:46.310 --> 00:01:48.260
Remember how we just talked about DICOM.

00:01:48.260 --> 00:01:54.185
We talked about how DICOM data elements has this element ID and the group ID.

00:01:54.185 --> 00:01:56.070
So we seize all those elements,

00:01:56.070 --> 00:01:58.230
this is group a, this is metadata elements.

00:01:58.230 --> 00:02:00.180
We have our SOP instance UID,

00:02:00.180 --> 00:02:02.190
we have our subclass UID.

00:02:02.190 --> 00:02:07.220
By the way, pydicom conveniently converts those complex UIDs

00:02:07.220 --> 00:02:12.215
that we've talked about into a human friendly string which is very nice of them.

00:02:12.215 --> 00:02:14.935
We see that this image has patient ID.

00:02:14.935 --> 00:02:18.230
We see that this image has patient name, parameter setup,

00:02:18.230 --> 00:02:22.660
that the name has obviously John Doe is probably has been anonymized.

00:02:22.660 --> 00:02:27.230
Let's look at some of the parameters which would be important for

00:02:27.230 --> 00:02:31.595
us as we try to figure out what is happening inside this volume.

00:02:31.595 --> 00:02:34.130
One of the parameters that you might want to look at,

00:02:34.130 --> 00:02:36.095
is a parameter called pixel spacing.

00:02:36.095 --> 00:02:37.610
We have talked how the two things,

00:02:37.610 --> 00:02:39.530
the pixel spacing and slice thickness,

00:02:39.530 --> 00:02:42.785
how they define the geometric parameters of a DICOM volume,

00:02:42.785 --> 00:02:45.590
so let's see what's happening with those in our volume,

00:02:45.590 --> 00:02:53.540
we see that pixel spacing is 0.76 millimeters and slice thickness is 2.5 millimeters.

00:02:53.540 --> 00:02:58.640
We can also see that pixel spacing across x-axis and across y-axis is the same,

00:02:58.640 --> 00:03:03.350
so we deal with voxels which are square in the in-plane dimension,

00:03:03.350 --> 00:03:06.720
but are non-square in the z-axis.

00:03:06.720 --> 00:03:10.160
All right, so these voxels are 0.76 by 2.5

00:03:10.160 --> 00:03:16.230
millimeters tall in the coronal or sagittal dimensions.

00:03:16.700 --> 00:03:18.860
Let's take a look at another way,

00:03:18.860 --> 00:03:20.720
by the way of extracting this value.

00:03:20.720 --> 00:03:26.090
If you have noticed, I was using this convenient member variable intercept,

00:03:26.090 --> 00:03:28.640
that pydicom library implements to use

00:03:28.640 --> 00:03:35.180
a human readable string to address a member of this subject of the slices object.

00:03:35.180 --> 00:03:39.590
I can also address one by directly specifying DICOM texts.

00:03:39.590 --> 00:03:42.530
This could be useful if you're dealing with datasets,

00:03:42.530 --> 00:03:45.995
if you are dealing with some tags which do not have user-friendly names.

00:03:45.995 --> 00:03:51.260
Sometimes you will see proprietary tags or a custom tags in those DICOM datasets,

00:03:51.260 --> 00:03:55.825
and those tags will not be necessarily a name because they would not be in the standard.

00:03:55.825 --> 00:03:59.600
This is the same pixel spacing but its directed by addressing

00:03:59.600 --> 00:04:04.175
the pixel spacing as this DICOM group ID like in Element ID format.

00:04:04.175 --> 00:04:08.080
So let us try and extract some pixel data from this.

00:04:08.080 --> 00:04:10.390
The pydicom object explore

00:04:10.390 --> 00:04:15.210
the member which is called pixel_array and this is where all the pixels sit.

00:04:15.210 --> 00:04:19.400
Let's use the empty stack function on this list that

00:04:19.400 --> 00:04:23.965
will generate by extracting all the pixel array from our slices list.

00:04:23.965 --> 00:04:27.770
We have imageData now as a NumPy 3D array.

00:04:27.770 --> 00:04:31.285
Let's confirm that it's a 3D array by looking at the shape.

00:04:31.285 --> 00:04:37.170
We have 512 by 512 images and 139 slices.

00:04:37.170 --> 00:04:41.840
We have our x and y dimensions in the dimensions ID

00:04:41.840 --> 00:04:46.500
one and two and we have dimension zero allocated for our Z dimension.

00:04:46.500 --> 00:04:49.530
Let's look at what is the data type that we're dealing with.

00:04:49.530 --> 00:04:51.990
We're dealing with 16 bit integers.

00:04:51.990 --> 00:04:55.910
We've talked how DICOM data has the wide dynamic range.

00:04:55.910 --> 00:04:58.130
We have 16 bits of grayscale here,

00:04:58.130 --> 00:05:01.655
and we only have eight bits of grayscale that our monitor screen can display.

00:05:01.655 --> 00:05:04.920
Let's see if we can just try to visualize a slice.

00:05:04.920 --> 00:05:06.375
Let's extract the random slice.

00:05:06.375 --> 00:05:09.195
Slice 115 would be reasonable and lets

00:05:09.195 --> 00:05:12.755
use Matplotlib with a grayscale color map to visualize it.

00:05:12.755 --> 00:05:15.005
This is what we get. Not bad.

00:05:15.005 --> 00:05:18.190
Matplotlib what it did just now,

00:05:18.190 --> 00:05:27.085
it's clamped it into the 256 bits grayscale space and it works well for the slice.

00:05:27.085 --> 00:05:29.980
In this slice, we can see some of the interesting artifacts,

00:05:29.980 --> 00:05:31.730
we can see this dark area here,

00:05:31.730 --> 00:05:34.315
and we can see a lighter area in the center here,

00:05:34.315 --> 00:05:37.430
we can see the dark area here, which our lungs,

00:05:37.430 --> 00:05:42.680
as you might already notice through all the medical images we've shown you so far,

00:05:42.680 --> 00:05:45.890
and we see some interesting white artifacts here,

00:05:45.890 --> 00:05:50.070
which seems to be brighter than these bones over here,

00:05:50.070 --> 00:05:51.180
so this is the rib-cage,

00:05:51.180 --> 00:05:52.845
this is the spine.

00:05:52.845 --> 00:05:56.180
So let's see what else can we do with this image.

00:05:56.180 --> 00:05:58.150
Let us visualize a few slices.

00:05:58.150 --> 00:06:01.040
This is a convenience code that I like to use in Jupyter notebooks.

00:06:01.040 --> 00:06:04.340
You are welcome to take it and use it in yours.

00:06:04.340 --> 00:06:07.505
Basically, we are building a table of

00:06:07.505 --> 00:06:12.980
a small slices and this gives us a view of what the rest of this volume looks like.

00:06:12.980 --> 00:06:15.695
It looks reasonable, no major outliers.

00:06:15.695 --> 00:06:18.800
This slices look darker than the others because probably

00:06:18.800 --> 00:06:22.250
we have this artifact which is much brighter than the rest of the anatomy.

00:06:22.250 --> 00:06:25.600
So we'll talk about this artifact later.

00:06:25.600 --> 00:06:28.400
But for now, let's see what else we can do.

00:06:28.400 --> 00:06:31.015
Let's try to visualize the coronal slice.

00:06:31.015 --> 00:06:37.500
Let's try to extract slice number 250 in the second dimension.

00:06:37.500 --> 00:06:40.850
I just know that the second dimension is the coronal dimension.

00:06:40.850 --> 00:06:43.760
But as we've talked about, this is something that you would have to discover when you

00:06:43.760 --> 00:06:47.615
are dealing with a new DICOM datasets.

00:06:47.615 --> 00:06:51.590
I'm extracting slice 250 because we just checked that our volume has

00:06:51.590 --> 00:06:55.920
512 by 512 pixels in the X and Y dimension.

00:06:55.920 --> 00:06:59.765
What happened here? This looks like human anatomy,

00:06:59.765 --> 00:07:03.985
but it's upside down and it's squished.

00:07:03.985 --> 00:07:05.715
Why is it squished?

00:07:05.715 --> 00:07:09.415
So remember, our voxels are not square,

00:07:09.415 --> 00:07:10.970
our voxels are rectangular.

00:07:10.970 --> 00:07:14.795
So to display this in the proper format,

00:07:14.795 --> 00:07:16.835
we need to apply aspect ratio.

00:07:16.835 --> 00:07:18.755
To apply aspect ratio,

00:07:18.755 --> 00:07:20.865
we need to make our voxel square.

00:07:20.865 --> 00:07:25.600
So we need to divide our slice thickness by our pixel spacing.

00:07:25.600 --> 00:07:28.055
Let's apply this aspect ratio coefficient when we

00:07:28.055 --> 00:07:30.840
display our image and let's see what we get.

00:07:30.840 --> 00:07:32.835
So that looks much better.

00:07:32.835 --> 00:07:34.140
It's still upside down,

00:07:34.140 --> 00:07:37.275
but we're not trying to display the correct anatomy here.

00:07:37.275 --> 00:07:40.510
At least, it does not look squished.

00:07:40.510 --> 00:07:45.815
But at this point, let us crop the volume a little bit.

00:07:45.815 --> 00:07:52.175
Remember how there was a lot of pixels here that obviously did not relate to any anatomy.

00:07:52.175 --> 00:07:56.340
So let's try to crop it a little bit and let's try to focus on the anatomy here.

00:07:56.340 --> 00:08:01.655
An interesting thing that we could try is to visualize a histogram of pixel values.

00:08:01.655 --> 00:08:03.635
So let's try that.

00:08:03.635 --> 00:08:08.855
I'm using the matplotlib hist function to visualize the histogram.

00:08:08.855 --> 00:08:10.600
I'm visualizing all the voxels,

00:08:10.600 --> 00:08:13.440
but I have some code here to visualize some of this certain voxels.

00:08:13.440 --> 00:08:16.000
So what we can see here is that there is

00:08:16.000 --> 00:08:19.515
an interesting spike around the value minus 3,000.

00:08:19.515 --> 00:08:24.435
A lot of voxels sits between minus 1,000 and plus 1,000.

00:08:24.435 --> 00:08:27.330
Then there is something happening here around 3,000.

00:08:27.330 --> 00:08:30.095
Well, let's see what is going on here.

00:08:30.095 --> 00:08:32.710
For now, let's see what are

00:08:32.710 --> 00:08:35.250
the minimum and maximum values that we have on

00:08:35.250 --> 00:08:38.140
our histogram and we confirm what we're seeing on histogram.

00:08:38.140 --> 00:08:40.985
The minimum value we have in our dataset is minus 3,000,

00:08:40.985 --> 00:08:42.965
maximum is plus 3,000.

00:08:42.965 --> 00:08:47.595
So at this point, it's good to recall what Hounsfield units are.

00:08:47.595 --> 00:08:49.600
We're dealing with a CT scan.

00:08:49.600 --> 00:08:52.835
Also we have discussed Hounsfield scale is

00:08:52.835 --> 00:08:56.305
a scale that measures radio density of physical matter.

00:08:56.305 --> 00:08:58.325
So on Hounsfield scale,

00:08:58.325 --> 00:09:02.149
which is the scale to which all the CT scans are calibrated,

00:09:02.149 --> 00:09:04.490
we have zero that corresponds to water.

00:09:04.490 --> 00:09:06.645
We have minus 1,000, this corresponds to air.

00:09:06.645 --> 00:09:09.860
We have bone that sits between 500 and 1,000.

00:09:09.860 --> 00:09:14.020
Anything that sits outside of this Hounsfield scale would be,

00:09:14.020 --> 00:09:16.355
well, I would say suspicious or at least interesting.

00:09:16.355 --> 00:09:17.800
Let's look at our diagram.

00:09:17.800 --> 00:09:21.220
So we see a lot of voxels around zero, which makes sense.

00:09:21.220 --> 00:09:23.175
Humans are made out of water.

00:09:23.175 --> 00:09:26.435
So that's where a lot of the tissue sits.

00:09:26.435 --> 00:09:28.695
There's lot of voxels around 1,000,

00:09:28.695 --> 00:09:30.190
which also make sense because,

00:09:30.190 --> 00:09:32.930
if we look at this image, we have a lot of empty space here.

00:09:32.930 --> 00:09:36.295
So this is basically air that we're imaging.

00:09:36.295 --> 00:09:39.600
This stuff sits outside the Hounsfield unit.

00:09:39.600 --> 00:09:42.475
So let's focus on what is going on there.

00:09:42.475 --> 00:09:46.390
Let's look at the bottom end of our image histogram first.

00:09:46.390 --> 00:09:51.745
We can see and let's look at the unique values that we have in our crops imagery.

00:09:51.745 --> 00:09:55.695
We can see that we have this minus 3,024 value.

00:09:55.695 --> 00:09:59.075
Then the next one up is minus 1,024.

00:09:59.075 --> 00:10:02.385
So there is nothing in between. This looks suspicious.

00:10:02.385 --> 00:10:04.745
This leads us to believe that this value might be

00:10:04.745 --> 00:10:07.835
some magic number which was artificially inserted.

00:10:07.835 --> 00:10:10.540
Well, to get the real story here,

00:10:10.540 --> 00:10:13.835
you will need to understand how the scanner works that took this image.

00:10:13.835 --> 00:10:18.845
But for now, we can take a pretty good guess that probably this minus 3,000 is

00:10:18.845 --> 00:10:21.155
a value inserted by scanner to fill

00:10:21.155 --> 00:10:24.095
the portions of the image where acquisition was not made.

00:10:24.095 --> 00:10:26.825
Remember the sine anagram exercise? Remember

00:10:26.825 --> 00:10:29.735
how CT scans work by rotating around the patient?

00:10:29.735 --> 00:10:32.490
So they require basically a circular image.

00:10:32.490 --> 00:10:35.770
This is what we see in the first plot here.

00:10:35.770 --> 00:10:38.525
So this is the acquisition area, the circle.

00:10:38.525 --> 00:10:42.630
We have rectangular images that we can store in the computer memory.

00:10:42.630 --> 00:10:46.955
So that's why we need to pad something into these values in the corners.

00:10:46.955 --> 00:10:50.100
This is exactly what this minus 3,000 value is.

00:10:50.100 --> 00:10:54.270
So probably the scanner which was used to acquire this just uses this magic number to

00:10:54.270 --> 00:10:59.000
designate values which do not belong to any anatomical structures.

00:10:59.000 --> 00:11:03.365
So now, let us look at the upper end of our histogram.

00:11:03.365 --> 00:11:07.095
So let's do the simple computation.

00:11:07.095 --> 00:11:15.980
Let's only display the values which sits between 2,000 and 4,000 on Hounsfield scale.

00:11:15.980 --> 00:11:18.610
We see that now we're focusing on

00:11:18.610 --> 00:11:22.500
this interestingly shaped thing in

00:11:22.500 --> 00:11:27.355
the top right corner of this slice that we have extracted.

00:11:27.355 --> 00:11:31.355
So let's try to understand what this shape is.

00:11:31.355 --> 00:11:35.115
These are the dimensions of our image that we cropped.

00:11:35.115 --> 00:11:37.780
Let us show the cropped image.

00:11:37.780 --> 00:11:41.010
So we're zooming in on this structure.

00:11:41.010 --> 00:11:44.800
So we see that this structure has very regular corners.

00:11:44.800 --> 00:11:48.165
So probably this is something artificial.

00:11:48.165 --> 00:11:53.880
Let us try to look at the unique values that sit in this region.

00:11:53.880 --> 00:11:56.470
We can see that we do not really see

00:11:56.470 --> 00:11:59.890
the same pattern as we've seen with the special value,

00:11:59.890 --> 00:12:02.860
with the magic number that CT scanners were inserting.

00:12:02.860 --> 00:12:08.690
We see sort of continuous drop in voxel intensities down to 2,000 and maybe low,

00:12:08.690 --> 00:12:12.600
which leads us to believe that this thing was actually imaged by the CT scanner.

00:12:12.600 --> 00:12:16.450
But probably since it sits outside the Hounsfield unit scale,

00:12:16.450 --> 00:12:17.895
this is something artificial.

00:12:17.895 --> 00:12:21.210
Let's try to visualize the histogram and that's what we're kind of seeing here.

00:12:21.210 --> 00:12:25.560
A lot of very dense voxels here and then some that are less dense.

00:12:25.560 --> 00:12:27.779
To confirm our suspicion,

00:12:27.779 --> 00:12:30.530
let's actually load this volume into slicer.

00:12:30.530 --> 00:12:32.830
So let's go back to the slicer,

00:12:32.830 --> 00:12:35.385
which we just looked at.

00:12:35.385 --> 00:12:39.410
Let us load this volume here.

00:12:39.410 --> 00:12:43.145
Let us visualize this thing in 3D.

00:12:43.145 --> 00:12:49.305
So we see a lot of dense tissue here so let's window it a little bit.

00:12:49.305 --> 00:12:51.185
Let's see what we are looking at.

00:12:51.185 --> 00:12:56.725
So you can see as we change the density of voxels that appear on the screen,

00:12:56.725 --> 00:13:00.030
we can actually see a pretty high detail of the shirt that

00:13:00.030 --> 00:13:03.710
the patient was wearing and even some pills that they had in their pockets.

00:13:03.710 --> 00:13:06.850
But let's remove the lower density

00:13:06.850 --> 00:13:08.980
of things and let's focus on the higher density of things.

00:13:08.980 --> 00:13:12.370
So you can see as we go past the Hounsfield units,

00:13:12.370 --> 00:13:13.865
which corresponds to bones,

00:13:13.865 --> 00:13:16.785
we see our interesting structure.

00:13:16.785 --> 00:13:18.390
If we look at the structure,

00:13:18.390 --> 00:13:19.625
if we zoom in a little bit,

00:13:19.625 --> 00:13:23.700
it does look artificial and it actually is.

00:13:23.700 --> 00:13:25.700
So to understand what exactly that is,

00:13:25.700 --> 00:13:31.430
we can see that it has some opening and there is some tube like thing that goes into,

00:13:31.430 --> 00:13:33.405
well, I just know because I asked Mason.

00:13:33.405 --> 00:13:38.105
This is inferior vena cava, where it goes to.

00:13:38.105 --> 00:13:40.085
To understand what it is,

00:13:40.085 --> 00:13:43.115
you would need to ask a clinician and a clinician would tell you that most likely it's

00:13:43.115 --> 00:13:48.510
a chemotherapy port which is used to deliver medication into this patient.

00:13:48.510 --> 00:13:50.825
So probably this patient has some form

00:13:50.825 --> 00:13:54.255
of cancer disease which needs this type of treatment.

00:13:54.255 --> 00:13:58.115
So this analysis actually told us quite a bit about this volume.

00:13:58.115 --> 00:14:01.179
So we learned that this volume has some outliers,

00:14:01.179 --> 00:14:03.030
we learned that this volume has an anomaly.

00:14:03.030 --> 00:14:04.710
It has this implant.

00:14:04.710 --> 00:14:06.815
One interesting thing to keep in mind,

00:14:06.815 --> 00:14:08.430
once we've analyzed this volume,

00:14:08.430 --> 00:14:12.730
let us look at the range of the voxels that we're dealing with.

00:14:12.730 --> 00:14:19.780
So we see that our voxel sit under 6,000 units of integer, that they occupy.

00:14:19.780 --> 00:14:23.765
So they they sit on the range of minus 3,000 to plus 3,000.

00:14:23.765 --> 00:14:28.235
What we have seen how pretty much anything that's below 1,000 is irrelevant

00:14:28.235 --> 00:14:33.820
because it has to do with the synthetic values which have been added by the scanner.

00:14:33.820 --> 00:14:38.875
Probably anything above roughly 1,300 or 1,400 or maybe

00:14:38.875 --> 00:14:41.790
1,500 also might not be quite relevant

00:14:41.790 --> 00:14:45.130
depending on what you're trying to do because this would be outliers.

00:14:45.130 --> 00:14:46.775
These would be things like implants.

00:14:46.775 --> 00:14:48.975
So by looking at this volume,

00:14:48.975 --> 00:14:52.570
we can get an intuition that if we actually crop the dataset

00:14:52.570 --> 00:14:56.160
and get rid of all the values which are outside of this range of minus 1200,

00:14:56.160 --> 00:15:01.355
plus 1300, this would allow us to double the precision that we would be

00:15:01.355 --> 00:15:03.760
operating with after we convert this dataset into

00:15:03.760 --> 00:15:07.290
floating point and feed it into our machine learning algorithms.

00:15:07.290 --> 00:15:11.130
So we have just seen how you can approach

00:15:11.130 --> 00:15:15.335
the problem of analyzing a 3D medical imaging volume.

00:15:15.335 --> 00:15:18.415
We have looked at some of the photometric attributes and we have seen

00:15:18.415 --> 00:15:21.725
how outliers might show up in 3D medical imaging volumes.

00:15:21.725 --> 00:15:27.200
Let's take a look at how would you approach analyzing a 3D medical image volume dataset.

